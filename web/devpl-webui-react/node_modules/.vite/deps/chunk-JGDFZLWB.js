import {
  MenuContext_default,
  SubMenu,
  cloneElement,
  isValidElement,
  omit,
  useFullPath
} from "./chunk-KDQDIIBE.js";
import {
  require_classnames
} from "./chunk-B4H4PX2F.js";
import {
  require_react
} from "./chunk-ZVMIEU5R.js";
import {
  __toESM
} from "./chunk-UXIASGQL.js";

// node_modules/antd/es/menu/SubMenu.js
var import_classnames = __toESM(require_classnames());
var React = __toESM(require_react());
var SubMenu2 = (props) => {
  var _a;
  const {
    popupClassName,
    icon,
    title,
    theme: customTheme
  } = props;
  const context = React.useContext(MenuContext_default);
  const {
    prefixCls,
    inlineCollapsed,
    theme: contextTheme
  } = context;
  const parentPath = useFullPath();
  let titleNode;
  if (!icon) {
    titleNode = inlineCollapsed && !parentPath.length && title && typeof title === "string" ? React.createElement("div", {
      className: `${prefixCls}-inline-collapsed-noicon`
    }, title.charAt(0)) : React.createElement("span", {
      className: `${prefixCls}-title-content`
    }, title);
  } else {
    const titleIsSpan = isValidElement(title) && title.type === "span";
    titleNode = React.createElement(React.Fragment, null, cloneElement(icon, {
      className: (0, import_classnames.default)(isValidElement(icon) ? (_a = icon.props) === null || _a === void 0 ? void 0 : _a.className : "", `${prefixCls}-item-icon`)
    }), titleIsSpan ? title : React.createElement("span", {
      className: `${prefixCls}-title-content`
    }, title));
  }
  const contextValue = React.useMemo(() => Object.assign(Object.assign({}, context), {
    firstLevel: false
  }), [context]);
  return React.createElement(MenuContext_default.Provider, {
    value: contextValue
  }, React.createElement(SubMenu, Object.assign({}, omit(props, ["icon"]), {
    title: titleNode,
    popupClassName: (0, import_classnames.default)(prefixCls, popupClassName, `${prefixCls}-${customTheme || contextTheme}`)
  })));
};
var SubMenu_default = SubMenu2;

export {
  SubMenu_default
};
//# sourceMappingURL=chunk-JGDFZLWB.js.map
