server:
  port: 8080
  context-path: /starter

spring:
  shardingsphere:
    datasource:
      names: ds0,ds1
      ds0:
        type: com.zaxxer.hikari.HikariDataSource
        driverClassName: com.mysql.jdbc.Driver
        jdbcUrl: jdbc:mysql://127.0.0.1:3306/sharding_starter_0?useUnicode=true&characterEncoding=utf-8&useSSL=false&allowMultiQueries=true
        username: root
        password: root
      ds1:
        type: com.zaxxer.hikari.HikariDataSource
        driverClassName: com.mysql.jdbc.Driver
        jdbcUrl: jdbc:mysql://127.0.0.1:3306/sharding_starter_1?useUnicode=true&characterEncoding=utf-8&useSSL=false&allowMultiQueries=true
        username: root
        password: root
    sharding:
      defaultDataSourceName: ds0    # 默认的数据源
      tables:
        order_main:
          actual-data-nodes: ds0.order_main_$->{[0,2]},ds1.order_main_$->{[1,3]}
          key-generator:
            column: order_id
            type: SNOWFLAKE
          database-strategy:
            inline:
              sharding-column: order_id
              algorithm-expression: ds$->{order_id % 2}
          table-strategy:
            inline:
              sharding-column: order_id
              algorithm-expression: order_main_$->{order_id % 4}
        order_detail:
          actual-data-nodes: ds0.order_detail_$->{[0,2]},ds1.order_detail_$->{[1,3]}
          key-generator:
            column: id
            type: SNOWFLAKE
          database-strategy:
            inline:
              sharding-column: order_id
              algorithm-expression: ds$->{order_id % 2}
          table-strategy:
            inline:
              sharding-column: order_id
              algorithm-expression: order_detail_$->{order_id % 4}
        order_payment:
          actual-data-nodes: ds0.order_payment_$->{[0,2]},ds1.order_payment_$->{[1,3]}
          key-generator:
            column: id
            type: SNOWFLAKE
          database-strategy:
            inline:
              sharding-column: order_id
              algorithm-expression: ds$->{order_id % 2}
          table-strategy:
            inline:
              sharding-column: order_id
              algorithm-expression: order_payment_$->{order_id % 4}
        order_main_by_year:
          actual-data-nodes: ds0.order_main_by_year_$->{[2018,2019]},ds1.order_main_by_year_$->{[2020,2021]}
          key-generator:
            column: order_id
            type: SNOWFLAKE
          database-strategy:
            standard: # 使用自定义的分片算法
              precise-algorithm-class-name: org.setamv.shardingsphere.starter.sharding.algorithm.PreciseYearDatabaseShardingAlgorithm
              sharding-column: order_date
          table-strategy:
            standard:
              precise-algorithm-class-name: org.setamv.shardingsphere.starter.sharding.algorithm.PreciseYearTableShardingAlgorithm
              sharding-column: order_date
        order_detail_by_year:
          actual-data-nodes: ds0.order_detail_by_year_$->{2018..2019},ds1.order_detail_by_year_$->{2020..2021}
          key-generator:
            column: id
            type: SNOWFLAKE
          database-strategy:
            standard: # 使用自定义的分片算法
              precise-algorithm-class-name: org.setamv.shardingsphere.starter.sharding.algorithm.PreciseYearDatabaseShardingAlgorithm
              sharding-column: order_date
          table-strategy:
            standard:
              precise-algorithm-class-name: org.setamv.shardingsphere.starter.sharding.algorithm.PreciseYearTableShardingAlgorithm
              sharding-column: order_date
      binding-tables:   # 配置绑定表
        - order_main, order_detail
        - order_main, order_payment
        #- order_main_by_year, order_detail_by_year
    props:
      sql:
        show: true


mybatis:
  mapper-locations: classpath*:mapper/*.xml
  configuration:
    map-underscore-to-camel-case: true
    log-impl: org.apache.ibatis.logging.slf4j.Slf4jImpl

logging:
  level:
    org.setamv.shardingsphere.starter.dao: debug
    root: info