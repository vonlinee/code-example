/*
 *  Copyright 2001-present Stephen Colebourne
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package io.devpl.sdk.beans.sample;

import java.util.Map;
import java.util.NoSuchElementException;

import io.devpl.sdk.beans.gen.BeanDefinition;
import io.devpl.sdk.beans.gen.PropertyDefinition;
import io.devpl.sdk.beans.Bean;
import io.devpl.sdk.beans.ImmutableBean;
import io.devpl.sdk.beans.JodaBeanUtils;
import io.devpl.sdk.beans.MetaBean;
import io.devpl.sdk.beans.MetaProperty;
import io.devpl.sdk.beans.impl.StandardImmutableBeanBuilder;
import io.devpl.sdk.beans.impl.direct.DirectMetaBean;
import io.devpl.sdk.beans.impl.direct.DirectBeanMetaProperty;
import io.devpl.sdk.beans.impl.direct.DirectMetaPropertyMap;

/**
 * Mock pair, used for testing.
 */
@BeanDefinition(builderName = "Builder")
public final class PairManualInnerBuilder implements ImmutableBean {

    /**
     * The first value.
     */
    @PropertyDefinition
    private final String first;
    /**
     * The second value.
     */
    @PropertyDefinition
    private final String second;

    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code PairManualInnerBuilder}.
     * @return the meta-bean, not null
     */
    public static PairManualInnerBuilder.Meta meta() {
        return PairManualInnerBuilder.Meta.INSTANCE;
    }

    static {
        MetaBean.register(PairManualInnerBuilder.Meta.INSTANCE);
    }

    /**
     * Returns a builder used to create an instance of the bean.
     * @return the builder, not null
     */
    public static Builder builder() {
        return new Builder();
    }

    private PairManualInnerBuilder(
            String first,
            String second) {
        this.first = first;
        this.second = second;
    }

    @Override
    public PairManualInnerBuilder.Meta metaBean() {
        return PairManualInnerBuilder.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the first value.
     * @return the value of the property
     */
    public String getFirst() {
        return first;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the second value.
     * @return the value of the property
     */
    public String getSecond() {
        return second;
    }

    //-----------------------------------------------------------------------
    /**
     * Returns a builder that allows this bean to be mutated.
     * @return the mutable builder, not null
     */
    public Builder toBuilder() {
        return new Builder(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            PairManualInnerBuilder other = (PairManualInnerBuilder) obj;
            return JodaBeanUtils.equal(first, other.first) &&
                    JodaBeanUtils.equal(second, other.second);
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(first);
        hash = hash * 31 + JodaBeanUtils.hashCode(second);
        return hash;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code PairManualInnerBuilder}.
     */
    public static final class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code first} property.
         */
        private final MetaProperty<String> first = DirectBeanMetaProperty.ofImmutable(
                this, "first", PairManualInnerBuilder.class, String.class);
        /**
         * The meta-property for the {@code second} property.
         */
        private final MetaProperty<String> second = DirectBeanMetaProperty.ofImmutable(
                this, "second", PairManualInnerBuilder.class, String.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "first",
                "second");

        /**
         * Restricted constructor.
         */
        private Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 97440432:  // first
                    return first;
                case -906279820:  // second
                    return second;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public Builder builder() {
            return new Builder();
        }

        @Override
        public Class<? extends PairManualInnerBuilder> beanType() {
            return PairManualInnerBuilder.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code first} property.
         * @return the meta-property, not null
         */
        public MetaProperty<String> first() {
            return first;
        }

        /**
         * The meta-property for the {@code second} property.
         * @return the meta-property, not null
         */
        public MetaProperty<String> second() {
            return second;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 97440432:  // first
                    return ((PairManualInnerBuilder) bean).getFirst();
                case -906279820:  // second
                    return ((PairManualInnerBuilder) bean).getSecond();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            metaProperty(propertyName);
            if (quiet) {
                return;
            }
            throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------

    /**
     * The bean-builder for {@code PairManualBuilder}.
     */
    public static final class Builder extends StandardImmutableBeanBuilder<PairManualInnerBuilder> {

        private String first;
        private String second;

        private Builder() {
            super(meta());
        }

        private Builder(PairManualInnerBuilder beanToCopy) {
            super(meta());
            this.first = beanToCopy.getFirst();
            this.second = beanToCopy.getSecond();
        }

        //-----------------------------------------------------------------------
        @Override
        public Object get(String propertyName) {
            switch (propertyName) {
                case "first":
                    return first;
                case "second":
                    return second;
                default:
                    throw new NoSuchElementException("Unknown property: " + propertyName);
            }
        }

        @Override
        public Builder set(String propertyName, Object newValue) {
            switch (propertyName) {
                case "first":
                    this.first = (String) newValue;
                    break;
                case "second":
                    this.second = (String) newValue;
                    break;
                default:
                    throw new NoSuchElementException("Unknown property: " + propertyName);
            }
            return this;
        }

        @Override
        public Builder set(MetaProperty<?> property, Object value) {
            super.set(property, value);
            return this;
        }

        @Override
        public PairManualInnerBuilder build() {
            return new PairManualInnerBuilder(first, second);
        }

        //-----------------------------------------------------------------------
        /**
         * Sets the first value.
         * @param first  the new value
         * @return this, for chaining, not null
         */
        public Builder first(String first) {
            this.first = first;
            return this;
        }

        /**
         * Sets the second value.
         * @param second  the new value
         * @return this, for chaining, not null
         */
        public Builder second(String second) {
            this.second = second;
            return this;
        }

        //-----------------------------------------------------------------------
        @Override
        public String toString() {
            String buf = "PairManualBuilder.Builder{" +
                    "first" + '=' + JodaBeanUtils.toString(first) + ',' + ' ' +
                    "second" + '=' + JodaBeanUtils.toString(second) +
                    '}';
            return buf;
        }

    }

}
