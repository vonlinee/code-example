/*
 *  Copyright 2001-present Stephen Colebourne
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package io.devpl.sdk.beans.sample;

import java.util.NoSuchElementException;

import io.devpl.sdk.beans.ImmutableBean;
import io.devpl.sdk.beans.MetaBean;
import io.devpl.sdk.beans.MetaProperty;
import io.devpl.sdk.beans.TypedMetaBean;
import io.devpl.sdk.beans.gen.BeanDefinition;
import io.devpl.sdk.beans.impl.direct.DirectFieldsBeanBuilder;
import io.devpl.sdk.beans.impl.direct.MinimalMetaBean;

/**
 * Mock immutable empty bean, used for testing.
 * 
 * @author Stephen Colebourne
 */
@BeanDefinition(style = "minimal")
public final class MinimalEmpty implements ImmutableBean {

    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code MinimalEmpty}.
     */
    private static final TypedMetaBean<MinimalEmpty> META_BEAN =
            MinimalMetaBean.of(
                    MinimalEmpty.class,
                    new String[0],
                    () -> new MinimalEmpty.Builder());

    /**
     * The meta-bean for {@code MinimalEmpty}.
     * @return the meta-bean, not null
     */
    public static TypedMetaBean<MinimalEmpty> meta() {
        return META_BEAN;
    }

    static {
        MetaBean.register(META_BEAN);
    }

    /**
     * Returns a builder used to create an instance of the bean.
     * @return the builder, not null
     */
    public static MinimalEmpty.Builder builder() {
        return new MinimalEmpty.Builder();
    }

    private MinimalEmpty() {
    }

    @Override
    public TypedMetaBean<MinimalEmpty> metaBean() {
        return META_BEAN;
    }

    //-----------------------------------------------------------------------
    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        return obj != null && obj.getClass() == this.getClass();
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        return hash;
    }

    @Override
    public String toString() {
        String buf = "MinimalEmpty{" +
                '}';
        return buf;
    }

    //-----------------------------------------------------------------------
    /**
     * The bean-builder for {@code MinimalEmpty}.
     */
    public static final class Builder extends DirectFieldsBeanBuilder<MinimalEmpty> {

        /**
         * Restricted constructor.
         */
        private Builder() {
        }

        //-----------------------------------------------------------------------
        @Override
        public Object get(String propertyName) {
            throw new NoSuchElementException("Unknown property: " + propertyName);
        }

        @Override
        public Builder set(String propertyName, Object newValue) {
            throw new NoSuchElementException("Unknown property: " + propertyName);
        }

        @Override
        public Builder set(MetaProperty<?> property, Object value) {
            super.set(property, value);
            return this;
        }

        @Override
        public MinimalEmpty build() {
            return new MinimalEmpty();
        }

        //-----------------------------------------------------------------------
        @Override
        public String toString() {
            return "MinimalEmpty.Builder{}";
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------
}
