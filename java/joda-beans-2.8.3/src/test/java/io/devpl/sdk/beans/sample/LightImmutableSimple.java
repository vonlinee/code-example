/*
 *  Copyright 2001-present Stephen Colebourne
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package io.devpl.sdk.beans.sample;

import java.io.Serializable;
import java.lang.invoke.MethodHandles;

import io.devpl.sdk.beans.ImmutableBean;
import io.devpl.sdk.beans.JodaBeanUtils;
import io.devpl.sdk.beans.MetaBean;
import io.devpl.sdk.beans.TypedMetaBean;
import io.devpl.sdk.beans.gen.BeanDefinition;
import io.devpl.sdk.beans.gen.PropertyDefinition;
import io.devpl.sdk.beans.impl.light.LightMetaBean;

/**
 * Mock light bean, used for testing.
 * 
 * @author Stephen Colebourne
 */
@BeanDefinition(style = "light", constructorScope = "package")
public final class LightImmutableSimple implements ImmutableBean, Serializable {

    /**
     * The number.
     */
    @PropertyDefinition
    private final int number;
    /**
     * The text.
     */
    @PropertyDefinition
    private final String text;

    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code LightImmutableSimple}.
     */
    private static final TypedMetaBean<LightImmutableSimple> META_BEAN =
            LightMetaBean.of(
                    LightImmutableSimple.class,
                    MethodHandles.lookup(),
                    new String[] {
                            "number",
                            "text"},
                    new Object[0]);

    /**
     * The meta-bean for {@code LightImmutableSimple}.
     * @return the meta-bean, not null
     */
    public static TypedMetaBean<LightImmutableSimple> meta() {
        return META_BEAN;
    }

    static {
        MetaBean.register(META_BEAN);
    }

    /**
     * The serialization version id.
     */
    private static final long serialVersionUID = 1L;

    /**
     * Creates an instance.
     * @param number  the value of the property
     * @param text  the value of the property
     */
    LightImmutableSimple(
            int number,
            String text) {
        this.number = number;
        this.text = text;
    }

    @Override
    public TypedMetaBean<LightImmutableSimple> metaBean() {
        return META_BEAN;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the number.
     * @return the value of the property
     */
    public int getNumber() {
        return number;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the text.
     * @return the value of the property
     */
    public String getText() {
        return text;
    }

    //-----------------------------------------------------------------------
    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            LightImmutableSimple other = (LightImmutableSimple) obj;
            return (number == other.number) &&
                    JodaBeanUtils.equal(text, other.text);
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(number);
        hash = hash * 31 + JodaBeanUtils.hashCode(text);
        return hash;
    }

    @Override
    public String toString() {
        String buf = "LightImmutableSimple{" +
                "number" + '=' + JodaBeanUtils.toString(number) + ',' + ' ' +
                "text" + '=' + JodaBeanUtils.toString(text) +
                '}';
        return buf;
    }

    //-------------------------- AUTOGENERATED END --------------------------
}
