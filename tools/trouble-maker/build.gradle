buildscript {
    // 指定构建所需的仓库地址
    repositories {
        maven { url "https://maven.aliyun.com/nexus/content/groups/public" }
        maven { url "https://maven.aliyun.com/nexus/content/repositories/gradle-plugin" }
        mavenCentral()
        // 本地仓库位置
        maven { url "https://plugins.gradle.org/m2/" }
    }
	// 指定构建所需的依赖
    dependencies {
        //noinspection DifferentKotlinGradleVersion
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.72'
        classpath "gradle.plugin.com.hierynomus.gradle.plugins:license-gradle-plugin:0.15.0"
    }
}

plugins {
    id 'java'
}

group 'io.trouble.maker'
version '1.0-SNAPSHOT'

allprojects {
    group = 'io.trouble.maker'
    version = "1.0-SNAPSHOT"

    // 引入全局依赖定义脚本
    apply from: this.rootProject.file('gradle/global-dependency.gradle')

    // 配置编译选项
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.warnings = false
        // 这几行配置在有些版本无效，6.9版本有效
        // 忽略未检查的，或者过时API的警告，只需要不配置下面的编译参数就可以
        options.compilerArgs += ["-nowarn", "-XDenableSunApiLintControl"]
        options.compilerArgs += '-Xlint:-deprecation'
        options.compilerArgs += '-Xlint:-unchecked'
        options.compilerArgs << "-Xlint:unchecked"
        options.compilerArgs << "-Xlint:deprecation"
        // 指定-Werror会报错
        // options.compilerArgs << "-Werror"
    }
}

repositories {
    mavenCentral()
}

test {
	useJUnitPlatform()
}

subprojects {
    // 引入全局依赖定义脚本
    apply from: this.rootProject.file('gradle/global-dependency.gradle')

    apply plugin: 'java-library'  // apply plugin: 'java' 的替代品
    // apply plugin: 'signing'
    apply plugin: 'maven-publish'
    // apply plugin: 'com.github.hierynomus.license'

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.warnings = false
        options.deprecation = true
        options.compilerArgs += ["-parameters"]
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    // jar {
    //     afterEvaluate {
    //         manifest {
    //             attributes 'Implementation-Version': archiveVersion
    //             attributes 'Built-Gradle': gradle.gradleVersion
    //             attributes 'Bundle-DocURL': 'https://mybatis.plus/'
    //             attributes 'Build-OS': System.getProperty("os.name")
    //             attributes 'Built-By': System.getProperty("user.name")
    //             attributes 'Build-Jdk': System.getProperty("java.version")
    //             attributes 'Build-Timestamp': new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date())
    //         }
    //     }
    // }

    // license {
    //     encoding = "UTF-8"
    //     header = rootProject.file("license.txt")
    //     includes(["**/*.java", "**/*.kt"])
    //     exclude "**/test/**/*.kt"
    //     exclude "**/test/**/*.java"
    //     exclude "**/*Test.java"
    //     mapping "java", "SLASHSTAR_STYLE"
    //     mapping "kt", "SLASHSTAR_STYLE"
    //     ignoreFailures = true
    // }

    repositories {
        mavenLocal()
        maven { url "https://maven.aliyun.com/repository/public" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        mavenCentral()
    }

    dependencies {
        annotationProcessor libs.lombok
        testAnnotationProcessor libs.lombok
        testCompileOnly libs.lombok
        testImplementation libs.assertj_core
        testImplementation libs.junit_jupiter_api
        testRuntimeOnly libs.junit_jupiter_engine
        testImplementation libs.mockito_junit_jupiter
        testImplementation libs.lagarto
        testImplementation libs.logback_classic

        implementation libs.guava
        implementation libs.spring_core

        // configuration library for JVM languages using HOCON files
        implementation 'com.typesafe:config:1.4.2'
        implementation 'org.ini4j:ini4j:0.5.4'

        /* POI 注意版本兼容性 */
        implementation 'org.apache.poi:poi:5.0.0'
        implementation 'org.apache.poi:poi-ooxml:5.0.0'
        // 这个不会用到，最新版也只在2020年
        // implementation 'org.apache.poi:poi-ooxml-schemas:4.1.2'
        implementation 'org.apache.poi:poi-excelant:5.0.0'
        implementation 'org.apache.xmlbeans:xmlbeans:5.0.0'
        // https://mvnrepository.com/artifact/xerces/xercesImpl
        implementation 'xerces:xercesImpl:2.12.2'

        /* JSON */
        implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.1'
        implementation 'com.fasterxml.jackson.core:jackson-core:2.13.1'
        implementation 'com.fasterxml.jackson.core:jackson-annotations:2.13.1'
    }

    //noinspection GroovyAssignabilityCheck
    task sourcesJar(type: Jar) {
        // Gradle 4.10.3 不支持 archiveClassifier
//        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    javadoc {
        afterEvaluate {
            configure(options) {
                encoding "UTF-8"
                charSet 'UTF-8'
                author true
                version true
                failOnError false
                links "http://docs.oracle.com/javase/8/docs/api"
            }
        }
    }

    test {
        dependsOn("cleanTest", "generatePomFileForMavenJavaPublication")
        useJUnitPlatform()
    }

    task javadocJar(type: Jar) {
        // archiveClassifier = 'javadoc'
        from javadoc
    }

    tasks.whenTaskAdded { task ->
        if (task.name.contains('signMavenJavaPublication')) {
            task.enabled = new File(project.property('signing.secretKeyRingFile') as String).isFile()
        }
    }

    /*
    publishing {
        repositories {
            maven {
                def userName = System.getProperty("un")
                def passWord = System.getProperty("ps")
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                credentials {
                    username userName
                    password passWord
                }
            }
        }
        publications {
            mavenJava(MavenPublication) {
                from components.java

                artifact sourcesJar
                artifact javadocJar

                pom {
                    name = 'mybatis-plus'
                    packaging 'jar'
                    description = 'An enhanced toolkit of Mybatis to simplify development.'
                    url = 'https://github.com/baomidou/mybatis-plus'

                    scm {
                        connection = 'scm:git@github.com:Codearte/gradle-nexus-staging-plugin.git'
                        developerConnection = 'scm:git@github.com:Codearte/gradle-nexus-staging-plugin.git'
                        url = 'https://github.com/baomidou/mybatis-plus'
                    }

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id = 'baomidou'
                        }
                    }

                    withXml {
                        def root = asNode()
                        root.dependencies.'*'.findAll {
                            def d = it
                            d.scope.text() == 'runtime' && project.configurations.findByName("implementation").allDependencies.find { dep -> dep.name == it.artifactId.text()
                            }.each() {
                                d.scope*.value = 'compile'
                                d.appendNode('optional', true)
                            }
                        }
                    }
                }
            }
        }

        signing {
            sign publishing.publications.mavenJava
        }

         */
}
