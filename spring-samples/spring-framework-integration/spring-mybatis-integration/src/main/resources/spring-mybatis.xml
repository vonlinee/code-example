<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
           http://www.springframework.org/schema/beans  
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
           http://www.springframework.org/schema/aop  
           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/context  
           http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<context:property-placeholder
		location="classpath:jdbc.properties" />

	<!-- 引入jdbc配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<!--要是有多个配置文件，只需在这里继续添加即可 -->
				<value>classpath:properties/*.properties</value>
				<value>classpath:*.xml</value>
			</list>
		</property>
	</bean>

	<!-- 配置数据源 -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<!-- 不使用properties来配置 -->
		<property name="driverClassName"
			value="com.mysql.jdbc.Driver" />
		<property name="url"
			value="jdbc:mysql://localhost:3306/mysql_learn" />
		<property name="username" value="root" />
		<property name="password" value="123456" />
		<!-- 使用properties来配置 -->
		<!-- <property name="driverClassName"> <value>${jdbc_driverClassName}</value> 
			</property> <property name="url"> <value>${jdbc_url}</value> </property> 
			<property name="username"> <value>${jdbc_username}</value> </property> <property 
			name="password"> <value>${jdbc_password}</value> </property> -->
	</bean>

 	<!--Mybatis SqlSessionFactory-->
    <!--声明的是mybatis中提供的SqlSessionFactoryBean类，这个类内部创建SqlSessionFactory-->
    <!-- 配置Mybatis的文件 ，mapperLocations配置**Mapper.xml文件位置，configLocation配置mybatis-config文件位置 -->
    <bean id="SqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--set注入，把数据库连接池付给dataSource属性-->
        <property name="dataSource" ref="dataSource"/>
        <!--mybatis主配置文件的位置 configLocation属性是Resource类型，读取配置文件
            它的赋值使用的是value ， 指定文件的路径，使用的是classpath：表示文件的位置
        -->
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<!-- mapper.xml文件 -->
		<property name="mapperLocations" value="classpath:mappers/*.xml" />
		<!-- 别名配置 -->
		<property name="typeAliasesPackage" value="sample.spring.integration.mybatis.entity" />
    </bean>

    <!--创建 dao对象 使用SqlSession的getMapper(StudentDao.class)
        MapperScannerConfigurer在内部调用getMapper()生成每个dao接口的代理对象
    -->
    <!-- 自动扫描了所有的XxxxMapper.xml对应的mapper接口文件，这样就不用一个一个手动配置Mpper的映射了，只要Mapper接口类和Mapper映射文件对应起来就可以了。 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定的是SqlSessionFactory对象的id-->
        <property name="sqlSessionFactoryBeanName" value="SqlSessionFactory"/>
        <!--指定包名，包名是dao接口所在的包名
            MapperScannerConfigurer会扫描这个包中的所有接口，把每个接口都执行一次getMapper()方法，得到每个接口的dao对象
            创建好的dao对象放入到spring的容器中
            dao默认对象的名称：是接口名字的首字母小写
        -->
        <property name="basePackage" value="sample.spring.integration.mybatis.mapper"/>
        <!--多个包-->
        <!--<property name="basePackage" value="sample.spring.integration.mybatis.mapper"/>-->
    </bean>



	<!-- 以下是事务配置 -->

	<bean id="appTransactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<tx:annotation-driven proxy-target-class="false" transaction-manager="appTransactionManager" />

</beans>
